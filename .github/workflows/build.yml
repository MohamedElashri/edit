name: Watch Edit Releases and Build Packages

on:
  schedule:
    - cron: '0 0 * * *'    # Daily at midnight UTC
  workflow_dispatch:

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.compare.outputs.new_version }}
      is_new:       ${{ steps.compare.outputs.is_new }}
    steps:
      - name: Fetch latest upstream release tag
        id: fetch
        run: |
          echo "latest_tag=$(curl -s https://api.github.com/repos/microsoft/edit/releases/latest \
            | jq -r .tag_name)" >> $GITHUB_OUTPUT

      - name: Checkout this repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compare with existing tags
        id: compare
        run: |
          latest="${{ steps.fetch.outputs.latest_tag }}"
          if git rev-parse "refs/tags/$latest" >/dev/null 2>&1; then
            echo "is_new=false" >> $GITHUB_OUTPUT
          else
            echo "is_new=true" >> $GITHUB_OUTPUT
            echo "new_version=$latest" >> $GITHUB_OUTPUT
          fi

  build-debs:
    needs: check-release
    if: needs.check-release.outputs.is_new == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, aarch64]
    env:
      VERSION: ${{ needs.check-release.outputs.new_version }}
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby-dev build-essential zstd jq
          sudo gem install --no-document fpm

      - name: Download and extract Edit
        run: |
          version="${VERSION#v}"
          url="https://github.com/microsoft/edit/releases/download/${VERSION}/edit-${version}-${{ matrix.arch }}-linux-gnu.tar.zst"
          curl -L -o edit.tar.zst "$url"
          mkdir -p stage/usr/bin
          tar --use-compress-program=unzstd -xf edit.tar.zst
          mv edit stage/usr/bin/
          chmod +x stage/usr/bin/edit

      - name: Build .deb
        run: |
          case "${{ matrix.arch }}" in
            x86_64) deb_arch=amd64 ;;
            aarch64) deb_arch=arm64 ;;
          esac
          fpm -s dir -t deb \
              -n edit \
              -v "${VERSION#v}" \
              --architecture "$deb_arch" \
              --prefix /usr \
              --description "Microsoft Edit CLI editor" \
              --maintainer "automated@github.actions" \
              -C stage usr/bin/edit
          mv edit_*.deb edit-${VERSION#v}-$deb_arch.deb

      - name: Generate SHA256 hash
        run: |
          for file in edit-*.deb; do
            sha256sum "$file" > "$file".sha256
          done

      - name: Upload .deb artifacts
        uses: actions/upload-artifact@v4
        with:
          name: edit-debs-${{ matrix.arch }}
          path: |
            edit-*.deb
            *.sha256

  build-macos:
    needs: check-release
    if: needs.check-release.outputs.is_new == 'true'
    runs-on: macos-latest
    env:
      VERSION: ${{ needs.check-release.outputs.new_version }}
    steps:
      - name: Install dependencies
        run: |
          brew update
          brew install ruby
          gem install --no-document fpm

      - name: Clone Edit source
        run: |
          git clone --depth 1 --branch "${VERSION}" https://github.com/microsoft/edit.git upstream

      - name: Set up Rust (nightly) and build
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Build release binary
        working-directory: upstream
        run: |
          rustup target add aarch64-apple-darwin
          cargo build --release --target aarch64-apple-darwin

      - name: Stage binary
        run: |
          mkdir -p stage/usr/local/bin
          cp upstream/target/aarch64-apple-darwin/release/edit stage/usr/local/bin/

      - name: Package .pkg
        run: |
          version="${VERSION#v}"
          fpm -s dir -t osxpkg \
              -n edit \
              -v "$version" \
              --architecture arm64 \
              --prefix /usr/local \
              --description "Microsoft Edit CLI editor" \
              --maintainer "automated@github.actions" \
              -C stage usr/local/bin/edit
          mv edit-*.pkg edit-${version}-arm64.pkg

      - name: Generate SHA256 hash
        run: |
          shasum -a 256 edit-*.pkg > edit-${VERSION#v}-arm64.pkg.sha256

      - name: Upload .pkg artifact
        uses: actions/upload-artifact@v4
        with:
          name: edit-macos-arm64
          path: |
            edit-*.pkg
            *.sha256

  release:
    needs: [build-debs, build-macos]
    if: needs.check-release.outputs.is_new == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Flatten artifacts
        run: |
          find all-artifacts -type f -exec mv {} all-artifacts/ \;

      - name: Create Git tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag "${{ needs.check-release.outputs.new_version }}"
          git push origin "${{ needs.check-release.outputs.new_version }}"

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check-release.outputs.new_version }}
          name: "Edit ${{ needs.check-release.outputs.new_version }}"
          files: all-artifacts/*.*
