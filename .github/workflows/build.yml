name: Watch Edit Releases and Build Packages

on:
  schedule:
    - cron: '0 0 * * *'    # Daily at midnight UTC
  workflow_dispatch:

jobs:
  check-release:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.compare.outputs.new_version }}
      is_new:       ${{ steps.compare.outputs.is_new }}
    steps:
      - name: Fetch latest upstream release tag
        id: fetch
        run: |
          echo "latest_tag=$(curl -s https://api.github.com/repos/microsoft/edit/releases/latest \
            | jq -r .tag_name)" >> $GITHUB_OUTPUT

      - name: Checkout our repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compare with existing tags
        id: compare
        run: |
          latest="${{ steps.fetch.outputs.latest_tag }}"
          if git rev-parse "refs/tags/$latest" >/dev/null 2>&1; then
            echo "is_new=false" >> $GITHUB_OUTPUT
          else
            echo "is_new=true" >> $GITHUB_OUTPUT
            echo "new_version=$latest" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-release
    if: needs.check-release.outputs.is_new == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            pkg: deb
            pkg_arch: amd64
            prefix: /usr/bin
          # Linux aarch64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            pkg: deb
            pkg_arch: arm64
            prefix: /usr/bin
          # macOS Apple Silicon only
          - os: macos-latest
            target: aarch64-apple-darwin
            pkg: osxpkg
            pkg_arch: arm64
            prefix: /usr/local/bin

    env:
      VERSION: ${{ needs.check-release.outputs.new_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust (nightly)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Install packaging tools
        run: |
          if [[ "${{ matrix.pkg }}" == "deb" ]]; then
            sudo apt-get update
            sudo apt-get install -y ruby-dev build-essential zstd
            sudo gem install --no-document fpm
          else
            brew install ruby
            gem install --no-document fpm
          fi

      - name: Stage binary
        run: |
          mkdir -p stage${{ matrix.prefix }}
          cp target/${{ matrix.target }}/release/edit stage${{ matrix.prefix }}/

      - name: Package
        run: |
          version="${VERSION#v}"
          if [[ "${{ matrix.pkg }}" == "deb" ]]; then
            fpm -s dir -t deb \
                -n edit \
                -v "$version" \
                --architecture "${{ matrix.pkg_arch }}" \
                --prefix /usr \
                --description "Microsoft Edit CLI editor" \
                --maintainer "automated@github.actions" \
                -C stage usr/bin/edit
            mv edit_*.deb edit-${version}-${{ matrix.pkg_arch }}.deb
          else
            fpm -s dir -t osxpkg \
                -n edit \
                -v "$version" \
                --architecture "${{ matrix.pkg_arch }}" \
                --prefix "${{ matrix.prefix }}" \
                --description "Microsoft Edit CLI editor" \
                --maintainer "automated@github.actions" \
                -C stage "${{ matrix.prefix }}/edit"
            mv edit-*.pkg edit-${version}-${{ matrix.pkg_arch }}.pkg
          fi

      - name: Generate SHA256 checksum
        run: |
          for file in edit-*.$( [[ "${{ matrix.pkg }}" == "deb" ]] && echo deb || echo pkg ); do
            sha256sum "$file" > "$file".sha256
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: edit-${{ matrix.pkg }}-${{ matrix.pkg_arch }}
          path: |
            edit-*.$( [[ "${{ matrix.pkg }}" == "deb" ]] && echo deb || echo pkg )
            *.sha256

  release:
    needs: [check-release, build]
    if: needs.check-release.outputs.is_new == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Flatten artifacts
        run: |
          find all-artifacts -type f -exec mv {} all-artifacts/ \;

      - name: Create Git tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag "${{ needs.check-release.outputs.new_version }}"
          git push origin "${{ needs.check-release.outputs.new_version }}"

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check-release.outputs.new_version }}
          name: "Edit ${{ needs.check-release.outputs.new_version }}"
          files: all-artifacts/*.deb,all-artifacts/*.pkg,all-artifacts/*.sha256
